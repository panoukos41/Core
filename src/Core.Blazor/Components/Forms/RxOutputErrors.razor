@using Core.Blazor.Reactive.Forms
@using Core.Blazor.Reactive.Forms.Abstract
@using Core.Blazor.Reactive.Forms.Primitives

@inherits Ignis.Components.IgnisComponentBase
@implements IDisposable

@if (GetErrors() is { Count: > 0 } errors)
{
    foreach(var error in errors)
    {
        <div class="error flex items-center gap-1">
            <!-- Icon -->
            @* <i class="bg-red-500 rounded-full w-4 h-4"></i> *@

            <!-- Translation -->
            <small>@error.Key</small>
            <!-- <small>{{'errors.' + error.key | translate}} </small> -->

            <!-- Special values -->
            @if (error is ValidationError e)
            {
                @ValueFor("Current", e)
                @ValueFor("Min", e)
                @ValueFor("Max", e)
            }
        </div>
    }
}

@code {
    private AbstractControl? previousControl;
    private IDisposable? sub;

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public AbstractControl? Control { get; set; }

    [Parameter]
    public FormGroup? FormGroup { get; set; }

    [CascadingParameter]
    public FormGroup? FormGroupParent { get; set; }

    [Parameter]
    public ValidationErrorCollection? Errors { get; set; }

    private AbstractControl? GetControl()
    {
        if (Control is { }) return Control;
        if (string.IsNullOrEmpty(Id)) return null;
        if (FormGroup is { } && FormGroup.TryGet(Id, out var control1)) return control1;
        if (FormGroupParent is { } && FormGroupParent.TryGet(Id, out var control2)) return control2;
        return null;
    }

    private ValidationErrorCollection? GetErrors()
    {
        if (Errors is { }) return Errors;
        if (GetControl() is { } control) return control.Errors;
        return null;
    }

    protected override void OnUpdate()
    {
        if (previousControl == GetControl()) return;
        previousControl = GetControl();
        Dispose();

        if (previousControl is null) return;
        sub = previousControl.StatusChanges.Subscribe(_ => Update());
    }

    public void Dispose()
    {
        sub?.Dispose();
        sub = null;
    }

    private static RenderFragment ValueFor(string key, ValidationError error) => __builder =>
    {
        if (error.TryGetValue(key, out var v))
        {
            <small>@v</small>
        }
    };
}
