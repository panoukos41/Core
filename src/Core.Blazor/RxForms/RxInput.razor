@inherits RxInputBase<T>
@typeparam T where T : IParsable<T>

@if (!string.IsNullOrEmpty(Label))
{
    <label for="@Id">@Label</label>
}
@if (Read)
{
    <p>@FormControl.GetFormatted()</p>
    @* <p *ngIf="!edit; else view">{{type === 'currency' && value ? (value | currency: 'EUR') : (value ?? '-')}}</p> *@
}
else if (Type is "textarea")
{
    <textarea
        @attributes="Attributes"
        id="@Id"
        type="@Type"
        value="@FormControl.GetFormatted()"
        disabled="@FormControl.Disabled"
        class="@CssClass"
        placeholder="@(Label ?? string.Empty)"
        @oninput="OnChange"
        @onblur="() => FormControl.MarkAsTouched()"
    />
}
else
{
    <input
        @attributes="Attributes"
        id="@Id"
        value="@FormControl.GetFormatted()"
        disabled="@FormControl.Disabled"
        class="@CssClass"
        placeholder="@(Label ?? string.Empty)"
        @oninput="OnChange"
        @onblur="() => FormControl.MarkAsTouched()"
    />
}
@if (HideErrors is false)
{
    <RxOutputErrors Control="FormControl" />
}

@* <ng-template #view>

    <input *ngIf="type !== 'textarea' && type !== 'search'"
           [disabled]="disabled"
           [ngModel]="formValue.value"
           (ngModelChange)="updateValue($event)"
           [type]="type === 'currency' ? 'number' : type"
           [step]="type === 'currency' ? 0.01 : null" />

    <div *ngIf="type === 'search'" class="input-wrapper flex items-center">
        <input class="flex-grow input-in-wrapper"
               [disabled]="disabled"
               [ngModel]="formValue.value"
               (ngModelChange)="searchSub.next($event)" />

        <button *ngIf="!searching" type="button" (click)="searchChange.emit(searchSub.value)">
            <i class="icon-search text-primary text-sm me-1"></i>
        </button>

        <div *ngIf="searching">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-primary" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
        </div>
    </div>

    <ng-container [formGroup]="formGroup">
        <textarea *ngIf="type === 'textarea'" [formControlName]="name"></textarea>
    </ng-container>

    <rx-output-errors *ngIf="displayErrors" [control]="formValue" />

</ng-template> *@
@code {
    [Parameter]
    public string Type { get; set; } = "text";

    private void OnChange(ChangeEventArgs args)
    {
        FormControl.SetRawValue(args.Value as string);
    }
}
